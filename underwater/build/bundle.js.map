{"version":3,"file":"bundle.js","sources":["webpack:///webpack/bootstrap 5275e80514eccad4898e","webpack:///./src/Tilemap.js","webpack:///./src/utils.js","webpack:///./src/index.js","webpack:///./src/Game.js","webpack:///./src/Input.js","webpack:///./src/Key.js","webpack:///./src/StateManager.js","webpack:///./src/PlayState.js","webpack:///./src/Camera.js","webpack:///./src/Physics.js","webpack:///./src/Player.js","webpack:///./src/entity/Mine.js","webpack:///./src/GameOverState.js","webpack:///./src/GameWaitState.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5275e80514eccad4898e","class Tilemap {\n  constructor(game, mapName, tilesetName) {\n    this.game = game;\n    this.mapName = mapName;\n    this.tilesetName = tilesetName;\n\n    // tiled editor data\n    this.data = this.game.loader.resources[this.mapName].data;\n\n    this.tileset = this.game.loader.resources[this.tilesetName];\n\n    this.tilewidth = this.data.tilewidth;\n    this.tileheight = this.data.tileheight;\n\n    //tileset textures\n    this.textures = [];\n\n    this.layers = {};\n\n    this.createTilesetTextures();\n  }\n\n  createTilesetTextures() {\n    const rows = this.tileset.texture.orig.height / this.tileheight;\n    const columns = this.tileset.texture.orig.width / this.tilewidth;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        const sourceX = j * this.tilewidth;\n        const sourceY = i * this.tileheight;\n\n        const frame = new PIXI.Rectangle(\n          sourceX, sourceY, \n          this.tilewidth, this.tileheight\n        );\n\n        const texture = new PIXI.Texture(this.tileset.texture, frame);\n        this.textures.push(texture);\n      }\n    }\n  }\n\n  addLayerToStage(layerName) {\n    const layer = new PIXI.particles.ParticleContainer();\n    const layerData = this.getLayerData(layerName);\n\n    for (let i = 0; i < this.data.height; i++) {\n      for (let j = 0; j < this.data.width; j++) {\n        //get tile index\n        const index = j + i * this.data.width;\n\n        const tile = layerData[index];\n\n        if (tile != 0) {\n          const texture = this.textures[tile - 1];\n          const sprite = new PIXI.Sprite(texture);\n          sprite.x = j * this.tilewidth;\n          sprite.y = i * this.tileheight;\n          layer.addChild(sprite);\n        }\n      }\n    };\n\n    this.layers[layerName] = layer;\n    this.game.stage.addChild(layer);\n  }\n\n  getLayerData(layerName) {\n    let data = null;\n    this.data.layers.forEach((item, i) => {\n      if (item.name == layerName) {\n        data = item.data;\n      };\n    });\n    return data;\n  }\n}\n\nexport default Tilemap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Tilemap.js\n// module id = 0\n// module chunks = 0","/**\n * @param {rectangle} rect1\n * @param {rectangle} rect2\n * @return {boolean} result collision\n */\nexport function checkCollision(rect1, rect2) {\n  let collided = false;\n\n  if (rect1.x < rect2.x + rect2.width &&\n    rect1.x + rect1.width > rect2.x &&\n    rect1.y < rect2.y + rect2.height &&\n    rect1.y + rect1.height > rect2.y) {\n    collided = true;\n  };\n\n  return collided;\n}\n\n\n/**\n * @param {number} value\n * @param {number} min value\n * @param {number} max value\n * @return {number} clamped value\n */\nexport function clamp(val, min, max) {\n  let clamped = val;\n  if (val < min) {\n    clamped = min;\n  } else if (val > max) {\n    clamped = max;\n  }\n  return clamped;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/utils.js\n// module id = 1\n// module chunks = 0","import Game from './Game';\n\nconst DEFAULT_WIDTH = 512;\nconst DEFAULT_HEIGHT = 512;\n\nconst containerEl = document.getElementById('game-container');\n\nlet width = DEFAULT_WIDTH;\nlet height = DEFAULT_HEIGHT;\n\nconst game = new Game(width, height);\ncontainerEl.appendChild(game.view);\n\ncontainerEl.style.width = width + 'px';\ncontainerEl.style.height = height + 'px';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 2\n// module chunks = 0","import Input from './Input';\nimport StateManager from './StateManager';\nimport PlayState from './PlayState';\nimport GameOverState from './GameOverState';\nimport GameWaitState from './GameWaitState';\n\n\nclass Game extends PIXI.Application {\n  constructor(width, height) {\n    super({\n      width: width,\n      height: height,\n      backgroundColor : 0xC9DDA0,\n    });\n    this.game = this;\n    this.input = new Input();\n    this.stateManager = new StateManager(this.game);\n\n    this.update = this.update.bind(this);\n    this.preload();\n  }\n\n  preload() {\n    this.loader.add('submarine', 'assets/submarine_x2.png');\n    this.loader.add('gameover', 'assets/gameover_x2.png');\n    this.loader.add('gamewait', 'assets/gamewait_x2.png');\n    this.loader.add('mine', 'assets/mine_x2.png');\n\n    this.loader.add('map1', 'assets/map1.json');\n    this.loader.add('map2', 'assets/map2.json');\n    \n    this.loader.add('tileset', 'assets/tileset_x2.png');\n\n    this.loader.add('level1', 'assets/level1.json');\n    this.loader.add('level2', 'assets/level2.json');\n\n    this.loader.load((loader, resources) => {\n      this.init();\n    });\n  }\n\n  init() {\n    //Register a handler for tick events\n    this.ticker.add(this.update);\n    \n    this.stateManager.add('play', new PlayState(this.game));\n    this.stateManager.add('gameover', new GameOverState(this.game));\n    this.stateManager.add('gamewait', new GameWaitState(this.game));\n    this.stateManager.start('gamewait');\n  }\n\n  update() {\n    this.stateManager.current.update();\n  }\n\n}\n\nexport default Game;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Game.js\n// module id = 3\n// module chunks = 0","import Key from './Key';\n\nconst keycodes = {\n  LEFT: 37, // arrow left\n  RIGHT: 39, // arrow right\n  UP: 38, // arrow up\n  DOWN: 40, // arrow down\n  ENTER: 13\n}\n\nclass Input {\n  constructor() {\n    this.key = {\n      left: new Key(keycodes.LEFT),\n      right: new Key(keycodes.RIGHT),\n      up: new Key(keycodes.UP),\n      down: new Key(keycodes.DOWN),\n      enter: new Key(keycodes.ENTER)\n    }\n  }\n\n}\n\nexport default Input;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Input.js\n// module id = 4\n// module chunks = 0","class Key {\n  constructor(code) {\n    this.code = code;\n    this.isDown = false;\n    this.isUp = true;\n    this.press = null;\n    this.release = null;\n\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n    document.addEventListener('keyup', this.handleKeyUp.bind(this));  \n  }\n\n  handleKeyDown(e) {\n    e.preventDefault();\n    if (this.code == e.keyCode) {\n      if (this.isUp && this.press) {\n        this.press();\n      }\n\n      this.isDown = true;\n      this.isUp = false;\n    }\n  }\n\n  handleKeyUp(e) {\n    e.preventDefault();\n    if (this.code == e.keyCode) {\n      if (this.isDown && this.release) {\n        this.release();\n      }\n\n      this.isDown = false;\n      this.isUp = true;\n    }\n  }\n}\n\nexport default Key;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Key.js\n// module id = 5\n// module chunks = 0","class StateManager {\n  constructor(game) {\n    this.game = game;\n    this.current = null;\n    this.states = {};\n  }\n\n  add(key, state) {\n    this.states[key] = state;\n  }\n\n  remove(key) {\n    delete this.states[key];\n  }\n\n  start(key) {\n    this.current = this.states[key];\n    this.current.init();\n  }\n}\n\nexport default StateManager;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/StateManager.js\n// module id = 6\n// module chunks = 0","import Tilemap from './Tilemap';\nimport Camera from './Camera';\nimport Physics from './Physics';\nimport Player from './Player';\nimport Mine from './entity/Mine';\n\n\nclass PlayState {\n  constructor(game) {\n    this.game = game;\n    this.camera = new Camera(this.game);\n    this.camera.setBounds(0, 0, 512, 512);\n    this.physics = new Physics(this.game);\n    this.tilemap = null;\n    this.player = null;\n    this.entity = null;\n    this.level = 'level1';\n    this.levelData = null;\n\n    this.crashed = false;\n  }\n\n  init() {\n    this.levelData = this.getLevelData(this.level);\n    this.crashed = false;\n    this.entity = [];\n    this.createTilemap();\n    this.createMines();\n    this.createPlayer();\n  }\n\n  getLevelData(levelName) {\n    const loader = this.game.loader;\n    const data = loader.resources[levelName].data;\n    return data;\n  }\n\n  createPlayer() {\n    const player = this.levelData.entity.player;\n\n    this.player = new Player(this.game, 'submarine');\n    this.player.setPosition(player.x, player.y);\n    this.player.setBounds(\n      player.bounds.x, \n      player.bounds.y, \n      player.bounds.width, \n      player.bounds.height\n    );\n    this.game.stage.addChild(this.player.sprite);\n    this.camera.follow(this.player.sprite);\n  }\n\n  createTilemap() {\n    const mapName = this.levelData.map.name;\n    const tilesetName = this.levelData.map.tileset;\n    this.tilemap = new Tilemap(this.game, mapName, tilesetName);\n\n    this.tilemap.data.layers.forEach((layer) => {\n      if (layer.visible == true) {\n        this.tilemap.addLayerToStage(layer.name);\n      }\n    });\n  }\n\n  createMines() {\n    // create mines\n    this.levelData.entity.mines.forEach((item) => {\n      const mine = new Mine(this.game, item.name);\n      mine.setPosition(item.x, item.y);\n      mine.setBounds(\n        item.bounds.x, \n        item.bounds.y, \n        item.bounds.width, \n        item.bounds.height\n      );\n      mine.direction.x = item.direction.x;\n      mine.direction.y = item.direction.y;\n\n      mine.vel.x = item.vel.x;\n      mine.vel.y = item.vel.y;\n      mine.moving = item.moving;\n\n      this.entity.push(mine);\n    });\n\n    //add all entuty to the game stage\n    this.entity.forEach((item) => {\n      this.game.stage.addChild(item.sprite);\n    });\n\n  }\n\n  nextLevel() {\n    if (this.levelData.next_level) {\n      this.level = this.levelData.next_level;\n      this.game.stage.destroy();\n      this.game.stage = new PIXI.Container();\n      this.init();\n    }\n  }\n\n  gameOver() {\n    this.crashed = true;\n    this.game.stateManager.start('gameover');\n  }\n\n  update() {\n    const key = this.game.input.key;\n\n    //save player position\n    const playerPosX = this.player.x;\n    const playerPosY = this.player.y;\n\n    if (key.left.isDown) {\n      this.player.moveLeft();\n    } else if (key.right.isDown) {\n      this.player.moveRight();\n    }\n\n    this.physics.collidePlayerToLayer(\n      this.player, \n      this.tilemap.layers['collision'],\n      () => {\n        this.player.x = playerPosX;\n        this.player.y = playerPosY;\n      }\n    );\n\n    if (key.up.isDown) {\n      this.player.moveUp();\n    } else if (key.down.isDown) {\n      this.player.moveDown();\n    }\n\n    this.physics.collidePlayerToLayer(\n      this.player, \n      this.tilemap.layers['collision'],\n      () => {\n        this.player.y = playerPosY;\n      }\n    );\n\n    this.physics.collidePlayerToLayer(\n      this.player,\n      this.tilemap.layers['coins'],\n      (coin) => {\n        this.tilemap.layers['coins'].removeChild(coin);\n        const coins = this.tilemap.layers['coins'].children;\n        if (coins.length == 0) {\n          this.nextLevel();\n        }\n      }\n    );\n\n    this.physics.collidePlayerToArray(\n      this.player, \n      this.entity, \n      (entity) => {\n        this.gameOver();\n      }\n    );\n\n    if (!this.crashed) {\n      this.camera.update();\n      this.player.update();\n\n      this.entity.forEach((item) => {\n        item.update();\n      });\n    }\n\n  }\n}\n\nexport default PlayState;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/PlayState.js\n// module id = 7\n// module chunks = 0","import { clamp } from './utils';\n\nclass Camera {\n  constructor(game) {\n    this.game = game;\n    this.screen = game.screen;\n    this.offset = new PIXI.Point(0, 0);\n    this.bounds = null;\n    this.target = null;\n    this.x = 0;\n    this.y = 0;\n\n  }\n\n  setPosition(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  setBounds(x, y, width, height) {\n    this.bounds = new PIXI.Rectangle(x, y, width, height);\n  }\n\n  follow(target) {\n    this.target = target;\n    const offsetX = this.screen.width / 2 - this.target.width / 2;\n    const offsetY = this.screen.height / 2 - this.target.height / 2;\n    this.offset.set(offsetX, offsetY);\n  }\n\n  update() {\n    if (this.target !== null) {\n      this.x = this.target.x - this.offset.x;\n      this.y = this.target.y - this.offset.y;\n    };\n    \n    if (this.bounds !== null) {\n      const minX = this.bounds.x;\n      const minY = this.bounds.y;\n      const maxX = this.bounds.x + this.bounds.width - this.screen.width;\n      const maxY = this.bounds.y + this.bounds.height - this.screen.height;\n      this.x = clamp(this.x, minX, maxX);\n      this.y = clamp(this.y, minY, maxY);\n    }\n\n    this.game.stage.x = -this.x;\n    this.game.stage.y = -this.y;\n  }\n\n}\n\n\nexport default Camera\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Camera.js\n// module id = 8\n// module chunks = 0","class Physics {\n  constructor(game) {\n    this.game = game;\n  }\n\n  /**\n   * @param {rectangle} rect1\n   * @param {rectangle} rect2\n   * @return {boolean} result collision\n   */\n  checkCollision(rect1, rect2) {\n    let collided = false;\n    if (rect1.x < rect2.x + rect2.width &&\n      rect1.x + rect1.width > rect2.x &&\n      rect1.y < rect2.y + rect2.height &&\n      rect1.y + rect1.height > rect2.y) {\n      collided = true;\n    };\n    return collided;\n  }\n\n  /**\n   * @param {Array} rectArray1\n   * @param {Array} rectArray2\n   * @return {boolean} result collision\n   */\n  checkForCollision(rectArray1, rectArray2) {\n    for (let i = 0; i < rectArray1.length; i++) {\n      for (let j = 0; j < rectArray2.length; j++) {\n        const rect1 = rectArray1[i];\n        const rect2 = rectArray2[j];\n        if (this.checkCollision(rect1, rect2)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {player obj} rectArray1\n   * @param {Array} entityArray\n   * @param {function} callback\n   */\n  collidePlayerToArray(player, entityArray, callback) {\n    player.body.forEach(playerRectangle => {\n      entityArray.forEach(entity => {\n        const rect1 = new PIXI.Rectangle(\n          player.x + playerRectangle.x,\n          player.y + playerRectangle.y,\n          playerRectangle.width,\n          playerRectangle.height\n        );\n        const rect2 = new PIXI.Rectangle(\n          entity.x + entity.body.x,\n          entity.y + entity.body.y,\n          entity.body.width,\n          entity.body.height\n        );\n\n        if (this.checkCollision(rect1, rect2)) {\n          callback(entity);\n        };\n      });\n    })\n  }\n\n  /**\n   * @param {player obj} player\n   * @param {layer container} layer\n   * @param {function} callback\n   */\n  collidePlayerToLayer(player, layer, callback) {\n    const playerBody = player.body;\n    const layerTiles = layer.children;\n\n    playerBody.forEach(playerRectangle => {\n      layerTiles.forEach(layerTile => {\n        const rect1 = new PIXI.Rectangle(\n          player.x + playerRectangle.x,\n          player.y + playerRectangle.y,\n          playerRectangle.width,\n          playerRectangle.height\n        );\n        const rect2 = layerTile;\n\n        if (this.checkCollision(rect1, rect2)) {\n          callback(layerTile);\n        };\n      });\n    })\n  }\n\n}\n\nexport default Physics;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Physics.js\n// module id = 9\n// module chunks = 0","import { clamp } from './utils';\n\n\nclass Player {\n  constructor(game, imageName) {\n    this.game = game;\n    this.baseTexture = this.game.loader.resources[imageName].texture;\n\n    this.x = 0;\n    this.y = 0;\n    this.width = 32;\n    this.height = 22;\n\n    this.bounds = null;\n\n    //source frames\n    this.frames = [\n      new PIXI.Rectangle(0, 0, 32, 22),\n      new PIXI.Rectangle(34, 0, 32, 22)\n    ];\n\n    this.textures = [\n      new PIXI.Texture(this.baseTexture, this.frames[0]),\n      new PIXI.Texture(this.baseTexture, this.frames[1])\n    ]\n\n    this.frame = 0;\n    this.sprite = new PIXI.Sprite(this.textures[this.frame]);\n\n    this.vel = 2;\n\n    this.body = [\n      new PIXI.Rectangle(0, 4, 32, 18),\n      new PIXI.Rectangle(10, 0, 12, 4)\n    ];\n\n    this.status = null;\n  }\n\n  setPosition(x, y) {\n    this.x = x;\n    this.y = y;\n    this.sprite.x = x;\n    this.sprite.y = y;\n  }\n\n  setBounds(x, y, width, height) {\n    this.bounds = new PIXI.Rectangle(x, y, width, height);\n  }\n\n  moveLeft() {\n    this.x -= this.vel;\n    this.frame = 1;\n  }\n\n  moveRight() {\n    this.x += this.vel;\n    this.frame = 0;\n  }\n\n  moveUp() {\n    this.y -= this.vel;\n  }\n\n  moveDown() {\n    this.y += this.vel;\n  }\n\n  update() {\n    if (this.bounds !== null) {\n      const minX = this.bounds.x;\n      const minY = this.bounds.y;\n      const maxX = this.bounds.x + this.bounds.width - this.width;\n      const maxY = this.bounds.y + this.bounds.height - this.height;\n      this.x = clamp(this.x, minX, maxX);\n      this.y = clamp(this.y, minY, maxY);\n    }\n\n    this.sprite.texture = this.textures[this.frame];\n    this.sprite.x = this.x;\n    this.sprite.y = this.y;\n  }\n}\n\nexport default Player;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Player.js\n// module id = 10\n// module chunks = 0","class Mine {\n  constructor(game, imageName) {\n    this.game = game;\n    this.baseTexture = this.game.loader.resources[imageName].texture;\n    this.sprite = new PIXI.Sprite(this.baseTexture);\n    this.x = 0;\n    this.y = 0;\n    this.width = 16;\n    this.height = 16;\n    this.moving = false;\n    this.bounds = null;\n    this.direction = new PIXI.Point(0, 0);\n    this.vel = new PIXI.Point(1, 0);\n    this.body = new PIXI.Rectangle(2, 2, 12, 12);\n  }\n\n  setBounds(x, y, width, height) {\n    this.bounds = new PIXI.Rectangle(x, y, width, height);\n  }\n\n  setPosition(x, y) {\n    this.x = x;\n    this.y = y;\n    this.sprite.x = x;\n    this.sprite.y = y;\n  }\n\n  update() {\n    if (this.moving) {\n      if (this.bounds !== null) {\n        const minX = this.bounds.x;\n        const minY = this.bounds.y;\n        const maxX = this.bounds.x + this.bounds.width - this.width;\n        const maxY = this.bounds.y + this.bounds.height - this.height;\n\n        if (this.x <= minX) {\n          this.direction.x = 1;\n        } else if (this.x >= maxX) {\n          this.direction.x = -1;\n        }\n\n        if (this.y <= minY) {\n          this.direction.y = 1;\n        } else if (this.y >= maxY) {\n          this.direction.y = -1;\n        }\n      }\n\n      this.x += this.vel.x * this.direction.x;\n      this.y += this.vel.y * this.direction.y;\n      this.sprite.x = this.x;\n      this.sprite.y = this.y;\n    }\n  }\n}\n\nexport default Mine;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/entity/Mine.js\n// module id = 11\n// module chunks = 0","class GameOverState {\n  constructor(game) {\n    this.game = game;\n    this.texture = this.game.loader.resources['gameover'].texture;\n    this.gameover = new PIXI.Sprite(this.texture);\n  }\n\n  init() {\n    const halfScreenWidth = this.game.screen.width / 2;\n    const halfScreenHeight = this.game.screen.height / 2;\n    const halfTextureWidht = this.texture.width / 2;\n    const halfTextureHeight = this.texture.height / 2;\n    this.gameover.x = halfScreenWidth - halfTextureWidht;\n    this.gameover.y = halfScreenHeight - halfTextureHeight;\n    this.game.stage.addChild(this.gameover);\n  }\n\n  update() {\n    const key = this.game.input.key;\n\n    if (key.enter.isDown) {\n      this.game.stage.destroy();\n      this.game.stage = new PIXI.Container();\n      this.game.stateManager.start('play');\n    }\n  }\n}\n\nexport default GameOverState;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/GameOverState.js\n// module id = 12\n// module chunks = 0","import Tilemap from './Tilemap';\n\n\nclass GameWaitState {\n  constructor(game) {\n    this.game = game;\n    this.texture = this.game.loader.resources['gamewait'].texture;\n    this.sprite = new PIXI.Sprite(this.texture);\n    this.tilemap = null;\n    this.level = 'level1';\n    this.levelData = null;\n  }\n\n  init() {\n    this.levelData = this.getLevelData(this.level);\n    this.createTilemap();\n    this.createText();\n  }\n\n  getLevelData(levelName) {\n    const loader = this.game.loader;\n    const data = loader.resources[levelName].data;\n    return data;\n  }\n\n  createTilemap() {\n    const mapName = this.levelData.map.name;\n    const tilesetName = this.levelData.map.tileset;\n    this.tilemap = new Tilemap(this.game, mapName, tilesetName);\n\n    this.tilemap.data.layers.forEach((layer) => {\n      if (layer.visible == true) {\n        this.tilemap.addLayerToStage(layer.name);\n      }\n    });\n  }\n\n  createText() {\n    const halfScreenWidth = this.game.screen.width / 2;\n    const halfScreenHeight = this.game.screen.height / 2;\n    const halfTextureWidht = this.texture.width / 2;\n    const halfTextureHeight = this.texture.height / 2;\n\n    this.sprite.x = halfScreenWidth - halfTextureWidht;\n    this.sprite.y = halfScreenHeight - halfTextureHeight;\n\n    this.game.stage.addChild(this.sprite);\n  }\n\n  update() {\n    const key = this.game.input.key;\n\n    if (key.enter.isDown) {\n      this.game.stage.destroy();\n      this.game.stage = new PIXI.Container();\n      this.game.stateManager.start('play');\n    }\n  }\n}\n\nexport default GameWaitState;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/GameWaitState.js\n// module id = 13\n// module chunks = 0"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9EA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9FA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A","sourceRoot":""}